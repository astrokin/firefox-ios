//
// CommunityAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


public extension DcntrAPI.CommunityAPI {
    /**
     Get post by owner and uuid.

     - parameter owner: (path)  
     - parameter uuid: (path)  
     - parameter requestedBy: (query) adds liked flag to response (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    class func getPostByID(owner: String, uuid: String, requestedBy: Any? = nil, completion: @escaping ((_ data: GetPostResponse?,_ error: Error?) -> Void)) {
        getPostByIDWithRequestBuilder(owner: owner, uuid: uuid, requestedBy: requestedBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get post by owner and uuid.
     - GET /posts/{owner}/{uuid}
     - 

     - examples: [{contentType=application/json, example={
  "post" : {
    "owner" : "owner",
    "createdAt" : 6,
    "likesCount" : 5,
    "pdv" : 2.3021358869347655,
    "dislikesCount" : 1,
    "likeWeight" : 5,
    "text" : "text",
    "category" : 0,
    "title" : "title",
    "uuid" : "uuid",
    "previewImage" : "previewImage",
    "slug" : "slug"
  },
  "stats" : [ {
    "date" : "date",
    "value" : 9.301444243932576
  }, {
    "date" : "date",
    "value" : 9.301444243932576
  } ],
  "profileStats" : {
    "postsCount" : 7,
    "stats" : [ {
      "date" : "date",
      "value" : 9.301444243932576
    }, {
      "date" : "date",
      "value" : 9.301444243932576
    } ]
  }
}}]
     - parameter owner: (path)  
     - parameter uuid: (path)  
     - parameter requestedBy: (query) adds liked flag to response (optional)

     - returns: RequestBuilder<GetPostResponse> 
     */
    class func getPostByIDWithRequestBuilder(owner: String, uuid: String, requestedBy: Any? = nil) -> RequestBuilder<GetPostResponse> {
        var path = "/posts/{owner}/{uuid}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(uuid)"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let URLString = DcntrAPI.Data.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "requestedBy": requestedBy
        ])


        let requestBuilder: RequestBuilder<GetPostResponse>.Type = DcntrAPI.Data.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", path: path, URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get post by slug.

     - parameter slug: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    class func getPostBySlug(slug: String, completion: @escaping ((_ data: SharePost?,_ error: Error?) -> Void)) {
        getPostBySlugWithRequestBuilder(slug: slug).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get post by slug.
     - GET /posts/{slug}
     - 

     - examples: [{contentType=application/json, example={
  "owner" : "owner",
  "title" : "title",
  "uuid" : "uuid"
}}]
     - parameter slug: (path)  

     - returns: RequestBuilder<SharePost> 
     */
    class func getPostBySlugWithRequestBuilder(slug: String) -> RequestBuilder<SharePost> {
        var path = "/posts/{slug}"
        let slugPreEscape = "\(slug)"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let URLString = DcntrAPI.Data.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SharePost>.Type = DcntrAPI.Data.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", path: path, URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter sortBy
     */
    enum SortBy_listPosts: String {
        case createdAt = "created_at"
        case likescount = "likesCount"
        case dislikescount = "dislikesCount"
        case pdv = "pdv"
    }

    /**
     * enum for parameter orderBy
     */
    enum OrderBy_listPosts: String { 
        case asc = "asc"
        case desc = "desc"
    }

    /**
     Return posts with additional meta information.

     - parameter category: (query) filters posts by category (optional)
     - parameter sortBy: (query) sets posts&#x27; field to be sorted by (optional, default to createdAt)
     - parameter orderBy: (query) sets sort&#x27;s direct (optional, default to desc)
     - parameter owner: (query) filters posts by owner (optional)
     - parameter likedBy: (query) filters posts by one who liked its (optional)
     - parameter followedBy: (query) filters post by owners who followed by followedBy (optional)
     - parameter limit: (query) limits count of returned posts (optional)
     - parameter after: (query) sets not-including bound for list by post id(&#x60;owner/uuid&#x60;) (optional)
     - parameter from: (query) sets lower datetime bound for list (optional)
     - parameter to: (query) sets upper datetime bound for list (optional)
     - parameter requestedBy: (query) adds liked flag to response (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    class func listPosts(category: Any? = nil, sortBy: SortBy_listPosts? = nil, orderBy: OrderBy_listPosts? = nil, owner: Any? = nil, likedBy: Any? = nil, followedBy: Any? = nil, limit: Any? = nil, after: Any? = nil, from: Any? = nil, to: Any? = nil, requestedBy: Any? = nil, completion: @escaping ((_ data: ListPostsResponse?,_ error: Error?) -> Void)) {
        listPostsWithRequestBuilder(category: category, sortBy: sortBy, orderBy: orderBy, owner: owner, likedBy: likedBy, followedBy: followedBy, limit: limit, after: after, from: from, to: to, requestedBy: requestedBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Return posts with additional meta information.
     - GET /posts
     - 

     - examples: [{contentType=application/json, example={
  "stats" : {
    "key" : [ null, null ]
  },
  "posts" : [ {
    "owner" : "owner",
    "createdAt" : 6,
    "likesCount" : 5,
    "pdv" : 2.3021358869347655,
    "dislikesCount" : 1,
    "likeWeight" : 5,
    "text" : "text",
    "category" : 0,
    "title" : "title",
    "uuid" : "uuid",
    "previewImage" : "previewImage",
    "slug" : "slug"
  }, {
    "owner" : "owner",
    "createdAt" : 6,
    "likesCount" : 5,
    "pdv" : 2.3021358869347655,
    "dislikesCount" : 1,
    "likeWeight" : 5,
    "text" : "text",
    "category" : 0,
    "title" : "title",
    "uuid" : "uuid",
    "previewImage" : "previewImage",
    "slug" : "slug"
  } ],
  "profileStats" : {
    "key" : {
      "postsCount" : 7,
      "stats" : [ {
        "date" : "date",
        "value" : 9.301444243932576
      }, {
        "date" : "date",
        "value" : 9.301444243932576
      } ]
    }
  }
}}]
     - parameter category: (query) filters posts by category (optional)
     - parameter sortBy: (query) sets posts&#x27; field to be sorted by (optional, default to createdAt)
     - parameter orderBy: (query) sets sort&#x27;s direct (optional, default to desc)
     - parameter owner: (query) filters posts by owner (optional)
     - parameter likedBy: (query) filters posts by one who liked its (optional)
     - parameter followedBy: (query) filters post by owners who followed by followedBy (optional)
     - parameter limit: (query) limits count of returned posts (optional)
     - parameter after: (query) sets not-including bound for list by post id(&#x60;owner/uuid&#x60;) (optional)
     - parameter from: (query) sets lower datetime bound for list (optional)
     - parameter to: (query) sets upper datetime bound for list (optional)
     - parameter requestedBy: (query) adds liked flag to response (optional)

     - returns: RequestBuilder<ListPostsResponse> 
     */
    class func listPostsWithRequestBuilder(category: Any? = nil, sortBy: SortBy_listPosts? = nil, orderBy: OrderBy_listPosts? = nil, owner: Any? = nil, likedBy: Any? = nil, followedBy: Any? = nil, limit: Any? = nil, after: Any? = nil, from: Any? = nil, to: Any? = nil, requestedBy: Any? = nil) -> RequestBuilder<ListPostsResponse> {
        let path = "/posts"
        let URLString = DcntrAPI.Data.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "category": category, 
                        "sortBy": sortBy?.rawValue, 
                        "orderBy": orderBy?.rawValue, 
                        "owner": owner, 
                        "likedBy": likedBy, 
                        "followedBy": followedBy, 
                        "limit": limit, 
                        "after": after, 
                        "from": from, 
                        "to": to, 
                        "requestedBy": requestedBy
        ])


        let requestBuilder: RequestBuilder<ListPostsResponse>.Type = DcntrAPI.Data.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", path: path, URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
