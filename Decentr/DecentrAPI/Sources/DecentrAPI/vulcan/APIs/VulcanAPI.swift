//
// VulcanAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire

// Vulcan - регистрация

open class VulcanAPI {
    /**
     Confirms registration and sends stakes.

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func confirm(body: ConfirmRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        confirmWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Confirms registration and sends stakes.
     - POST /v1/confirm
     - 

     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func confirmWithRequestBuilder(body: ConfirmRequest) -> RequestBuilder<Void> {
        let path = "/v1/confirm"
        let URLString = VulcanAPI.Data.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = VulcanAPI.Data.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter code: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOwnReferralCode(code: String, completion: @escaping ((_ data: ReferralCodeResponse?,_ error: Error?) -> Void)) {
        getOwnReferralCodeWithRequestBuilder(code: code).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/referral/code/{address}

     - examples: [{contentType=application/json, example={
  "code" : "code"
}}]
     - parameter code: (path)  

     - returns: RequestBuilder<ReferralCodeResponse> 
     */
    open class func getOwnReferralCodeWithRequestBuilder(code: String) -> RequestBuilder<ReferralCodeResponse> {
        var path = "/v1/referral/code/{address}"
        let codePreEscape = "\(code)"
        let codePostEscape = codePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{code}", with: codePostEscape, options: .literal, range: nil)
        let URLString = VulcanAPI.Data.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ReferralCodeResponse>.Type = VulcanAPI.Data.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter code: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getReferralTrackingStats(code: String, completion: @escaping ((_ data: ReferralTrackingStatsResponse?,_ error: Error?) -> Void)) {
        getReferralTrackingStatsWithRequestBuilder(code: code).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/referral/track/stats/{address}

     - examples: [{contentType=application/json, example={
  "last30Days" : {
    "reward" : {
      "amount" : { },
      "denom" : "denom"
    },
    "installed" : 6,
    "registered" : 1,
    "confirmed" : 0
  }
}}]
     - parameter code: (path)  

     - returns: RequestBuilder<ReferralTrackingStatsResponse> 
     */
    open class func getReferralTrackingStatsWithRequestBuilder(code: String) -> RequestBuilder<ReferralTrackingStatsResponse> {
        var path = "/v1/referral/track/stats/{address}"
        let codePreEscape = "\(code)"
        let codePostEscape = codePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{code}", with: codePostEscape, options: .literal, range: nil)
        let URLString = VulcanAPI.Data.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ReferralTrackingStatsResponse>.Type = VulcanAPI.Data.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter code: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRegistrationReferralCode(code: String, completion: @escaping ((_ data: ReferralCodeResponse?,_ error: Error?) -> Void)) {
        getRegistrationReferralCodeWithRequestBuilder(code: code).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/referral/code/{address}/registration

     - examples: [{contentType=application/json, example={
  "code" : "code"
}}]
     - parameter code: (path)  

     - returns: RequestBuilder<ReferralCodeResponse> 
     */
    open class func getRegistrationReferralCodeWithRequestBuilder(code: String) -> RequestBuilder<ReferralCodeResponse> {
        var path = "/v1/referral/code/{address}/registration"
        let codePreEscape = "\(code)"
        let codePostEscape = codePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{code}", with: codePostEscape, options: .literal, range: nil)
        let URLString = VulcanAPI.Data.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ReferralCodeResponse>.Type = VulcanAPI.Data.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Like a game cheat gives you test stakes. Works only for testnet.

     - parameter code: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func giveStakes(code: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        giveStakesWithRequestBuilder(code: code).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Like a game cheat gives you test stakes. Works only for testnet.
     - GET /v1/hesoyam/{address}
     - 

     - parameter code: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func giveStakesWithRequestBuilder(code: String) -> RequestBuilder<Void> {
        var path = "/v1/hesoyam/{address}"
        let codePreEscape = "\(code)"
        let codePostEscape = codePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{code}", with: codePostEscape, options: .literal, range: nil)
        let URLString = VulcanAPI.Data.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = VulcanAPI.Data.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Sends confirmation link via email. After confirmation stakes will be sent.

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func register(body: RegisterRequest, completion: @escaping ((_ data: EmptyResponse?,_ error: Error?) -> Void)) {
        registerWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Sends confirmation link via email. After confirmation stakes will be sent.
     - POST /v1/register
     - 

     - examples: [{contentType=application/json, example={ }}]
     - parameter body: (body)  

     - returns: RequestBuilder<EmptyResponse> 
     */
    open class func registerWithRequestBuilder(body: RegisterRequest) -> RequestBuilder<EmptyResponse> {
        let path = "/v1/register"
        let URLString = VulcanAPI.Data.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<EmptyResponse>.Type = VulcanAPI.Data.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func registerStats(completion: @escaping ((_ data: RegisterStats?,_ error: Error?) -> Void)) {
        registerStatsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/register/stats

     - examples: [{contentType=application/json, example={
  "total" : 6,
  "stats" : [ {
    "date" : "date",
    "value" : 0
  }, {
    "date" : "date",
    "value" : 0
  } ]
}}]

     - returns: RequestBuilder<RegisterStats> 
     */
    open class func registerStatsWithRequestBuilder() -> RequestBuilder<RegisterStats> {
        let path = "/v1/register/stats"
        let URLString = VulcanAPI.Data.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RegisterStats>.Type = VulcanAPI.Data.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retReferralParams(completion: @escaping ((_ data: Config?,_ error: Error?) -> Void)) {
        retReferralParamsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/referral/config

     - examples: [{contentType=application/json, example={
  "receiverReward" : { },
  "thresholdPDV" : { },
  "thresholdDays" : 5,
  "senderRewardLevels" : [ {
    "from" : 6,
    "to" : 1
  }, {
    "from" : 6,
    "to" : 1
  } ],
  "senderBonus" : [ {
    "count" : 0
  }, {
    "count" : 0
  } ]
}}]

     - returns: RequestBuilder<Config> 
     */
    open class func retReferralParamsWithRequestBuilder() -> RequestBuilder<Config> {
        let path = "/v1/referral/config"
        let URLString = VulcanAPI.Data.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Config>.Type = VulcanAPI.Data.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Returns sum of erc20 and native supply supply.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func supply(completion: @escaping ((_ data: Decimal?,_ error: Error?) -> Void)) {
        supplyWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns sum of erc20 and native supply supply.
     - GET /v1/supply
     - 

     - examples: [{contentType=application/json, example=0.8008281904610115}]

     - returns: RequestBuilder<Decimal> 
     */
    open class func supplyWithRequestBuilder() -> RequestBuilder<Decimal> {
        let path = "/v1/supply"
        let URLString = VulcanAPI.Data.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Decimal>.Type = VulcanAPI.Data.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Tracks the Decentr browser installation.

     - parameter code: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func trackBrowserInstallation(code: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        trackBrowserInstallationWithRequestBuilder(code: code).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Tracks the Decentr browser installation.
     - POST /v1/referral/track/install/{address}
     - 

     - parameter code: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func trackBrowserInstallationWithRequestBuilder(code: String) -> RequestBuilder<Void> {
        var path = "/v1/referral/track/install/{address}"
        let codePreEscape = "\(code)"
        let codePostEscape = codePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{code}", with: codePostEscape, options: .literal, range: nil)
        let URLString = VulcanAPI.Data.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = VulcanAPI.Data.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
