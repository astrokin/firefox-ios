//
// PDVAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


public extension CerberusAPI.PDVAPI {
    /**

     - parameter address: (path) PDV&#x27;s address 
     - parameter completion: completion handler to receive the data and the error objects
     */
    class func callGet(address: String, completion: @escaping ((_ data: PDV?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(address: address).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /pdv/{owner}/{id}

     - API Key:
       - type: apiKey Public-Key 
       - name: public_key
     - API Key:
       - type: apiKey Signature 
       - name: signature
     - examples: [{contentType=application/json, example={
  "version" : { }
}}]
     - parameter address: (path) PDV&#x27;s address 

     - returns: RequestBuilder<PDV> 
     */
    class func callGetWithRequestBuilder(address: String) -> RequestBuilder<PDV> {
        var path = "/pdv/{owner}/{id}"
        let addressPreEscape = "\(address)"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let URLString = CerberusAPI.Data.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PDV>.Type = CerberusAPI.Data.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get meta

     - parameter address: (path) PDV&#x27;s address 
     - parameter completion: completion handler to receive the data and the error objects
     */
    class func getMeta(address: String, completion: @escaping ((_ data: PDVMeta?,_ error: Error?) -> Void)) {
        getMetaWithRequestBuilder(address: address).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get meta
     - GET /pdv/{owner}/{id}/meta

     - examples: [{contentType=application/json, example={
  "reward" : 0,
  "object_types" : {
    "cookie" : 6,
    "profile" : 5,
    "location" : 1,
    "searchHistory" : 5,
    "advertiserId" : 0
  }
}}]
     - parameter address: (path) PDV&#x27;s address 

     - returns: RequestBuilder<PDVMeta> 
     */
    class func getMetaWithRequestBuilder(address: String) -> RequestBuilder<PDVMeta> {
        var path = "/pdv/{owner}/{id}/meta"
        let addressPreEscape = "\(address)"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let URLString = CerberusAPI.Data.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PDVMeta>.Type = CerberusAPI.Data.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter owner: (path) PDV&#x27;s address 
     - parameter from: (query) id of PDV to start from (optional)
     - parameter limit: (query) how many pdv will be returned (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    class func list(owner: String, from: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: [Int]?,_ error: Error?) -> Void)) {
        listWithRequestBuilder(owner: owner, from: from, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /pdv/{owner}

     - examples: [{contentType=application/json, example=[ 0, 0 ]}]
     - parameter owner: (path) PDV&#x27;s address 
     - parameter from: (query) id of PDV to start from (optional)
     - parameter limit: (query) how many pdv will be returned (optional)

     - returns: RequestBuilder<[Int]> 
     */
    class func listWithRequestBuilder(owner: String, from: Int? = nil, limit: Int? = nil) -> RequestBuilder<[Int]> {
        var path = "/pdv/{owner}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let URLString = CerberusAPI.Data.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "from": from?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<[Int]>.Type = CerberusAPI.Data.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) batch of pdv 
     - parameter completion: completion handler to receive the data and the error objects
     */
    class func save(body: PDV, completion: @escaping ((_ data: SavePDVResponse?,_ error: Error?) -> Void)) {
        saveWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /pdv

     - API Key:
       - type: apiKey Public-Key 
       - name: public_key
     - API Key:
       - type: apiKey Signature 
       - name: signature
     - examples: [{contentType=application/json, example={
  "id" : 0
}}]
     - parameter body: (body) batch of pdv 

     - returns: RequestBuilder<SavePDVResponse> 
     */
    class func saveWithRequestBuilder(body: PDV) -> RequestBuilder<SavePDVResponse> {
        let path = "/pdv"
        let URLString = CerberusAPI.Data.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SavePDVResponse>.Type = CerberusAPI.Data.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
